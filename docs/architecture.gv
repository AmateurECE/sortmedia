digraph G {
    node [
         fontsize = 8
         shape = "record"
    ]
    edge [
        fontsize = 8
    ]

    Argument [
        label = "{enum Argument\l|"
                + "+ INPUT\l"
                + "+ OUTPUT\l"
                + "}"]
    ArgumentParser [
        label = "{class ArgumentParser\l|"
                + "+ ArgumentParser()\l"
                + "+ verify() : void\l"
                + "+ parse() : void\l"
                + "+ enum Argument\l"
                + "+ getArgument(Argument) : std::string\l"
                + "}"]
    IFileLocator [
        label = "{interface IFileLocator\l|"
                + "+ listFilesInDirectory(const std::string& directory)"
                + " : std::vector\<std::string\>\l"
                + "+ recursivelyListFilesInDirectory(const std::string& "
                + "directory) : std::vector\<std::string\>\l"
                + "}"]
    MusicFileLocator [
        label = "{class MusicFileLocator\l|"
                + "}"]
    MediaSorter [
        label = "{class MediaSorter\l|"
                + "+ MediaSorter(const std::string& directory,"
                + " const IOrganizationalSchema& schema,"
                + " const IFileLocator& locator)\l"
                + "+ organize() : int\l"
                + "- initialization() : void\l"
                + "- organization() : void\l"
                + "}"]
    IFileOperation [
        label = "{interface IFileOperation\l|"
                + "+ apply() const : void\l"
                + "+ revert() const : void\l"
                + "}"]
    FileMoveOperation [
        label = "{class FileMoveOperation\l|"
                + "+ FileMoveOperation(ILibraryFile&,"
                + " const std::string& newLocation)\l"
                + "}"]
    FileRenameOperation [
        label = "{class FileRenameOperation\l|"
                + "+ FileRenameOperation(ILibraryFile&,"
                + " const std::string& newName)\l"
                + "}"]
    DirectoryCreateOperation [
        label = "{class DirectoryCreateOperation\l|"
                + "+ DirectoryCreateOperation(const std::string& path)\l"
                + "}"]
    DirectoryDeleteOperation [
        label = "{class DirectoryDeleteOperation\l|"
                + "+ DirectoryDeleteOperation(const std::string& path)\l"
                + "}"]
    MetaDiff [
        label = "{struct MetadataChangeOperation::MetaDiff\l|"
                + "+ (*setTag)(const std::string&) : void\l"
                + "+ oldValue : const std::string\l"
                + "+ newValue : const std::string\l"
                + "}"]
    MetadataChangeOperation [
        label = "{class MetadataChangeOperation\l|"
                + "+ struct MetaDiff\l"
                + "+ MetaDataChangeOperation("
                + "ILibraryFile&, const std::list\<const MetaDiff\>&)\l"
                + "}"]
    FileDeleteOperation [
        label = "{class FileDeleteOperation\l|"
                + "+ FileDeleteOperation(ILibraryFile&)\l"
                + "}"]
    ILibraryFile [
        label = "{interface ILibraryFile\l|"
                + "+ rename(const std::string&)\l"
                + "+ remove()\l"
                + "}"]
    MusicFile [
        label = "{class MusicFile\l|"
                + "+ getArtist() const : const std::string&\l"
                + "+ setArtist(std::string) : bool\l"
                + "+ getAlbum() const : const std::string&\l"
                + "+ setAlbum(std::string) : bool\l"
                + "}"]
    MovieFile [
        label = "{class MovieFile\l|"
                + "+ getDirector() const : const std::string&\l"
                + "+ setDirector(std::string) : bool\l"
                + "}"]
    LibraryFile [
        label = "{class LibraryFile\l|"
                + "}"]
    MP3File [
        label = "{class MP3File\l|"
                + "}"]
    M4AFile [
        label = "{class M4AFile\l|"
                + "}"]
    FLACFile [
        label = "{class FLACFile\l|"
                + "}"]
    MP4File [
        label = "{class MP4File\l|"
                + "}"]
    MKVFile [
        label = "{class MKVFile\l|"
                + "}"]
    IOrganizationalSchema [
        label = "{interface IOrganizationalSchema\l|"
                + "+ applyToFileByPath(std::string) : void\l"
                + "- makeOrganizer(std::string) : IOrganizationalPolicy\l"
                + "}"]
    OrganizationalSchema [
        label = "{class OrganizationalSchema\l|"
                + "+ final override applyToFileByPath(std::string) : void\l"
                + "- pure virtual std::unique_ptr\<IOrganizationalPolicy\>"
                + " makeOrganizer(std::string) : IOrganizationalPolicy\l"
                + "}"]
    PlexMusicOrganizationalSchema [
        label = "{class PlexMusicOrganizationalSchema\l|"
                + "}"]
    PlexMovieOrganizationalSchema [
        label = "{class PlexMovieOrganizationalSchema\l|"
                + "}"]
    IOrganizationalPolicy [
        label = "{interface IOrganizationalPolicy\l|"
                + "+ then(IOrganizationalPolicy) : IOrganizationalPolicy&\l"
                + "+ ensure() : std::unique_ptr\<IFileOperation\>\l"
                + "}"]
    OrganizationalPolicy [
        label = "{class OrganizationalPolicy\l|"
                + "}"]
    DefaultMusicOrganizationalPolicy [
        label = "{class DefaultMusicOrganizationalPolicy\l|"
                + "}"]
    OperationalFailureException [
        label = "{class OperationalFailureException\l|"
                + "+ what() const noexcept : const char*\l"
                + "}"]
    IMusicTagEditorFacade [
        label = "{interface IMusicTagEditorFacade\l|"
                + "}"]
    MusicTagEditor [
        label = "{class MusicTagEditor\l|"
                + "}"]
    IMovieTagEditorFacade [
        label = "{interface IMovieTagEditorFacade\l|"
                + "(Interface TBD)\l"
                + "}"]
    MovieTagEditorFacade [
        label = "{class MovieTagEditorFacade\l|"
                + "}"]
    ThreeLevelMusicFileOrganizationalPolicy [
        label = "{class ThreeLevelMusicFileOrganizationalPolicy\l|"
                + "}"]

    subgraph clusterCrossCutting {
        label = "namespace CrossCutting"
        color = "lightgrey"
        Logging [
            label = "Logging Subsystem"
        ]
    }

    subgraph TagLib {
        label = "namespace TagLib"
        color="lightgrey"
    }

    MediaSorter -> Logging [arrowhead="open"]
    IFileLocator -> MediaSorter [arrowhead="diamond"]
    MusicFileLocator -> IFileLocator [arrowhead="empty",style="dashed"]
    FileMoveOperation -> IFileOperation [arrowhead="empty",style="dashed"]
    FileRenameOperation -> IFileOperation [arrowhead="empty",style="dashed"]
    DirectoryCreateOperation -> IFileOperation
        [arrowhead="empty",style="dashed"]
    MetadataChangeOperation -> IFileOperation
        [arrowhead="empty",style="dashed"]
    MetaDiff -> MetadataChangeOperation [arrowhead="diamond"]
    LibraryFile -> ILibraryFile [arrowhead="empty",style="dashed"]
    MP3File -> MusicFile [arrowhead="empty",style="dashed"]
    MKVFile -> MovieFile [arrowhead="empty",style="dashed"]
    MusicFile -> LibraryFile [arrowhead="empty",style="dashed"]
    MovieFile -> LibraryFile [arrowhead="empty",style="dashed"]
    IFileOperation -> ILibraryFile [arrowhead="open"]
    IOrganizationalSchema -> IFileOperation [arrowhead="open"]
    IOrganizationalSchema -> MediaSorter [arrowhead="diamond"]
    OrganizationalSchema -> IOrganizationalSchema
        [arrowhead="empty",style="dashed"]
    IOrganizationalSchema -> ILibraryFile [arrowhead="open"]        
    MediaSorter -> PlexMusicOrganizationalSchema
        [arrowhead="open",style="dashed",label="&#x300A;instantiates&#x300B;"]
    MediaSorter -> PlexMovieOrganizationalSchema
        [arrowhead="open",style="dashed",label="&#x300A;instantiates&#x300B;"]
    MediaSorter -> MusicFileLocator [arrowhead="open"]
    IFileOperation -> OperationalFailureException [arrowhead="open"]
    FileDeleteOperation -> IFileOperation [arrowhead="empty",style="dashed"]
    MediaSorter -> ArgumentParser [arrowhead="open"]
    MediaSorter -> Argument [arrowhead="open"]
    ArgumentParser -> Argument [arrowhead="open"]
    MP3File -> IMusicTagEditorFacade [arrowhead="open"]
    MKVFile -> IMovieTagEditorFacade [arrowhead="open"]
    MusicTagEditor -> IMusicTagEditorFacade
        [arrowhead="empty",style="dashed"]
    MovieTagEditorFacade -> IMovieTagEditorFacade
        [arrowhead="empty",style="dashed"]
    DirectoryDeleteOperation -> IFileOperation
        [arrowhead="empty",style="dashed"]
    M4AFile -> MusicFile [arrowhead="empty",style="dashed"]
    M4AFile -> IMusicTagEditorFacade [arrowhead="open"]
    FLACFile -> MusicFile [arrowhead="empty",style="dashed"]
    FLACFile -> IMusicTagEditorFacade [arrowhead="open"]
    MP4File -> MovieFile [arrowhead="empty",style="dashed"]
    MP4File -> IMovieTagEditorFacade [arrowhead="open"]
    IOrganizationalSchema -> IOrganizationalPolicy [arrowhead="open"]
    OrganizationalPolicy -> IOrganizationalPolicy
        [arrowhead="empty",style="dashed"]
    DefaultMusicOrganizationalPolicy -> OrganizationalPolicy
        [arrowhead="empty",style="dashed"]
    PlexMusicOrganizationalSchema -> OrganizationalSchema
        [arrowhead="empty",style="dashed"]
    PlexMusicOrganizationalSchema -> ThreeLevelMusicFileOrganizationalPolicy
        [arrowhead="open",style="dashed",label="&#x300A;instantiates&#x300B;"]
}